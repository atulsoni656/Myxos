alias physicalSP S0;
physicalSP=([PTBR + 2*( SP/512)]*512 + SP%512);
alias systemcall_no S1;
systemcall_no=[physicalSP - 1];
alias counter S2;
alias count S3;
alias pid S4;

if(systemcall_no==10) then			//exit() system call.
   
   pid=(PTBR-1024)/8;
   
   count=0;
   while (count<32) do
  	if ([READY_LIST + (32*count)+1] == (100 + pid)) then
  		 [READY_LIST + (32*count)+1] = 1;
  		
  	endif;
  	count = count + 1;
  endwhile;
  
  counter = 1;	
	while (counter < 32) do
		if ([READY_LIST + ((32 * (counter + pid) % 1024)) + 1] == 1) then 	//if there is a process in the ready state
			
			break;
		endif;

		counter = counter + 1;
	endwhile;

	if (counter == 32) then
		halt;				//no ready process exit, So HALT.
		ireturn;
	endif;
   
   
	alias systemfiletableindex S5; 		
	count=0;
	while(count<8) do		//Closing all files opened by current process.
        	systemfiletableindex=[ READY_LIST + pid*32 + 15 + 2*counter ];
        	
             if([ READY_LIST + pid*32 + 15 + 2*count ]!=-1) then
        	[FILE_TABLE + 2*systemfiletableindex +1]=[FILE_TABLE + 2*systemfiletableindex +1]-1;	//decrement file count in SWOFT.
        	
        		if([FILE_TABLE + 2*systemfiletableindex +1]==0) then   	//invalidate the entry .(if file count is zero.
        	     		[FILE_TABLE + 2*systemfiletableindex ]=-1;
       			 endif;
        
			[ READY_LIST + pid*32 + 15 + 2*count ]=-1;			//ppoft invalidate
			[ READY_LIST + pid*32 + 15 + 2*count + 1]=-1;
		endif;
	
		count=count+1;
	endwhile;

	[ READY_LIST + pid*32 +1]=0;		//setting state to terminated.

	alias datablock S6;

	count=0;
	while(count<8) do		//invalidating entries in PageTable.
  		if(([PTBR + count+1]=="01") ||  ([PTBR + count+1]=="11")) then
  			datablock=[PTBR + count];
  			[MEM_LIST + datablock ]= [MEM_LIST + datablock ] - 1;
  	    endif;
  			
  		if([PTBR + counter]>=448) then
            datablock=[PTBR + counter];
            [DISK_LIST + datablock]=[DISK_LIST + datablock] - 1;
      endif;
  
 	     [PTBR + count]=-1;
       	     [PTBR + count + 1]="00";
 	 count=count+2;
	endwhile;

store(6,20);	

endif;

if(systemcall_no==13) then 						//wait system call.........................
    alias waitingPID S5;
    waitingPID=[physicalSP-3];
    pid=(PTBR-1024)/8;
    alias PCB S6;
	PCB = READY_LIST + 32 * pid;
	
	if (waitingPID < 0 || waitingPID > 31) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	
    if(([READY_LIST + 32*waitingPID + 1]==2) || ([READY_LIST + 32*waitingPID +1]==0 )) then
         [physicalSP-2]=-1;
         ireturn;
     endif;
     
     alias deadlockPID S7;
     deadlockPID = waitingPID;
     
     while ([READY_LIST + (32 * waitingPID) + 1] >= 100) do 		//checking for deadlock, there should be no 															  cycles
		if (([READY_LIST + (32 * waitingPID) + 1] - 100) == pid) then	//if at least one of the processes is 																	dependent on current process, there 																  is a cycle
			[physicalSP - 2] = -1;
			print("DEADLOCK");
			ireturn;
		endif;

		waitingPID = [READY_LIST + (32 * waitingPID) + 1] - 100;	//update WaitingPID to check through all 															   processes
	endwhile;


     [READY_LIST + 32*pid + 1]=100 + deadlockPID;
     
     [physicalSP - 2] = 0;
     
     counter = 1;	
	while (counter < 32) do
		if ([READY_LIST + ((32 * (counter + pid) % 1024)) + 1] == 1) then 	//if there is a process in the ready state
			
			break;
		endif;

		counter = counter + 1;
	endwhile;


	//DON'T forget to save the registers of the process that is going to wait

	[PCB + 2] = BP;
	[PCB + 3] = SP - 1;	//Whenever an interrupt happens IP is pushed onto the stack and SP is incremented by 1

	[PCB + 4] = [physicalSP];	//store the IP which has now been pushed onto the stack and is on the top
	[PCB + 5] = PTBR;
	[PCB + 6] = PTLR;

	[PCB + 7] = R0;
	[PCB + 8] = R1;
	[PCB + 9] = R2;
	[PCB + 10] = R3;
	[PCB + 11] = R4;
	[PCB + 12] = R5;
	[PCB + 13] = R6;
	[PCB + 14] = R7;
  
    
endif;

if(systemcall_no==14) then                                      //signal system call...........
    alias processID S4;
    processID=(PTBR-1024)/8;
    
    alias flag S14;
    flag=0;
    counter=0;
    while(counter<32) do
       if([READY_LIST + 32*counter +1]==(100 + processID)) then
          [READY_LIST + 32*counter +1]=1;
          flag=flag+1;
       endif;
       counter=counter+1;
   endwhile;
           
           if(flag==0) then
                  [physicalSP - 2] = -1;
                   ireturn;
           endif;
           
    [physicalSP - 2] = 0;       
    ireturn;
    

endif;
	
alias newPCB S7;                                               //common code
	 
	newPCB = READY_LIST + (32 * (pid+counter) % 1024);   	//new ready process to run.

	BP = [newPCB + 2];
	SP = [newPCB + 3];

	PTBR = [newPCB + 5];
	PTLR = [newPCB + 6];

	R0 = [newPCB + 7];		//setting up all the registers.
	R1 = [newPCB + 8];
	R2 = [newPCB + 9];
	R3 = [newPCB + 10];
	R4 = [newPCB + 11];
	R5 = [newPCB + 12];
	R6 = [newPCB + 13];
	R7 = [newPCB + 14];
	 
	SP = SP + 1; 
	alias newphysicalSP S8; 
	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
	[newphysicalSP] = [newPCB + 4];	   // Stores IP field value of PCB on the stack 
	
	[newPCB + 1] = 2;	           //set the new process to running
	
ireturn;
	
